// Count Inversions in an array | Set 1 (Using Merge Sort)
// Difficulty Level : Hard 
// Inversion Count for an array indicates â€“ how far (or close) the array is from being sorted. If array is already sorted then inversion count is 0. If array is sorted in reverse order that inversion count is the maximum. 
// Formally speaking, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j 
// Example: 

// Input: arr[] = {8, 4, 2, 1}
// Output: 6

// Explanation: Given array has six inversions:
// (8, 4), (4, 2), (8, 2), (8, 1), (4, 1), (2, 1).

// Input: arr[] = {3, 1, 2}
// Output: 2

// Explanation: Given array has two inversions:
// (3, 1), (3, 2) 

// Eg : { 1, 20, 6, 4, 5}
   // ans=5                                1 20 6 4 5
    // ans=1 + (2+2)                1 6 20             4 5
    // ans=1                    1 20       6         4      5     ans =0 

#include <bits/stdc++.h>
using namespace std;
int merge( int arr[] , int n , int i , int mid , int j)
{
    int temp[n];
    int left = i;
    int right = mid;
    int k = 0 , ans = 0 ;
    while( left <= mid-1  && right <= j )
    {
        if( arr[left] <= arr[right] )            // if arr[left] < arr[right] -- > push
        {
            temp[k++] = arr[left++];
        }
        else                                    //eg 1,3,5 & 2 then ans = 3idx - 1idx = 2 bcoz 3,5 is greater than 2, mid=mid+1
        {
            temp[k++] = arr[right++];
            ans += mid - left;                  //mid+1 - left_index
        }
    }
    while( left < mid ) temp[k++] = arr[left++];    //copy all elements in left side
    while( right <= j ) temp[k++] = arr[right++];   //copy all elements in right side

    for(int itr = 0 ; itr < k ; itr++ ) arr[i++] = temp[itr];   //copy all the elements to original array
    return ans;
}
int inversion( int arr[] , int n , int i , int j)
{
    int mid , ans = 0;
    if( i < j )
    {
        int mid = i +(j-i)/2;                   
        ans += inversion( arr , n , i , mid );          // first half of divided array
        ans += inversion( arr, n , mid+1 , j);          // second half of divided array

        ans += merge( arr , n , i , mid+1 , j);         //merge and compute the answer
    }  
    return ans;
}
int main() {
    int arr[] = { 1, 20, 6, 4}; 
    int n = 4;
    cout << inversion( arr , n , 0 , n-1);
    return 0;
}

 